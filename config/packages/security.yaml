security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: native

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            logout:
                path:   app_logout
                target: app_login


            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path:     /

            two_factor:
                auth_form_path: 2fa_login    # The route name you have used in the routes.yaml
                check_path: 2fa_login_check  # The route name you have used in the routes.yaml

            custom_authenticator: App\Security\AppCustomAuthenticator
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            switch_user: true

    role_hierarchy:
        ROLE_USER_PLUS: [ROLE_USER, ROLE_ALLOWED_TO_SWITCH]
        ROLE_ADMIN: [ROLE_USER, ROLE_DIRECTORY_MANAGER, ROLE_DONATION_MANAGER, ROLE_EMAIL_MANAGER, ROLE_COMMUNICATIONS_MANAGER, ROLE_EVENT_MANAGER, ROLE_ALLOWED_TO_SWITCH]
        ROLE_DIRECTORY_MANAGER: [ROLE_USER_PLUS]
        ROLE_EMAIL_MANAGER: [ROLE_USER_PLUS]
        ROLE_DONATION_MANAGER: [ROLE_USER_PLUS]
        ROLE_COMMUNICATIONS_MANAGER: [ROLE_USER_PLUS]
        ROLE_EVENT_MANAGER: [ROLE_USER_PLUS]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # This makes the logout route accessible during two-factor authentication. Allows the user to
        # cancel two-factor authentication, if they need to.
        # This ensures that the form can only be accessed when two-factor authentication is in progress.
        - { path: ^/$, role: [PUBLIC_ACCESS] }
        - { path: ^/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }
        - { path: ^/2fa_check, role: IS_AUTHENTICATED_2FA_IN_PROGRESS}
        - { path: ^/admin, roles: ROLE_ADMIN }
#        - { path: ^/directory, roles: ROLE_USER } # also defined in controller
        - { path: ^/login, role: [PUBLIC_ACCESS] }
        - { path: ^/logout, role: [IS_AUTHENTICATED_ANONYMOUSLY, ROLE_USER] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
